generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String             @id @default(cuid())
  name            String
  firstSurname    String
  secondSurname   String?
  email           String             @unique
  password        String
  category        Category
  isActive        Boolean            @default(true)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  assignedToId    String?
  gpuReservations GpuReservation[]
  assignedTo      User?              @relation("MentorJuniors", fields: [assignedToId], references: [id])
  juniors         User[]             @relation("MentorJuniors")
  serverAccess    UserServerAccess[]
}

model Server {
  id           String             @id @default(cuid())
  name         String
  ramGB        Int
  diskCount    Int
  available    Boolean            @default(true)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  gpus         Gpu[]
  reservations GpuReservation[]
  userAccess   UserServerAccess[]
}

model Gpu {
  id           String           @id @default(cuid())
  name         String
  type         String
  ramGB        Int
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  serverId     String
  server       Server           @relation(fields: [serverId], references: [id], onDelete: Cascade)
  reservations GpuReservation[]
}

model UserServerAccess {
  id        String   @id @default(cuid())
  userId    String
  serverId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  server    Server   @relation(fields: [serverId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, serverId])
}

model GpuReservation {
  id            String            @id @default(cuid())
  userId        String
  gpuId         String
  serverId      String
  status        ReservationStatus @default(PENDING)
  createdAt     DateTime          @default(now())
  startDate     DateTime?
  endDate       DateTime?
  actualEndDate DateTime?
  extendedAt    DateTime?
  extendedUntil DateTime?
  cancelledAt   DateTime?
  gpu           Gpu               @relation(fields: [gpuId], references: [id], onDelete: Cascade)
  server        Server            @relation(fields: [serverId], references: [id], onDelete: Cascade)
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([gpuId])
  @@index([serverId])
  @@index([status])
  @@index([startDate])
}

enum Category {
  ADMIN
  RESEARCHER
  JUNIOR
}

enum ReservationStatus {
  PENDING
  ACTIVE
  EXTENDED
  COMPLETED
  CANCELLED
}
